CTX Fryer
=========
// Web page meta data.
:keywords:    parser, generator, compiler, interpreter, XML, XSLT, regex, CFG, CFL, LALR(1)
:description: CTX fryer project aim is to create (yet another) generator of context-free +
              languages (CFL) parsers. The label is a pun, implicating that the software    +
              should be as easily and highly usable and as sturdy as a titanium pan.


.{revdate}: ctx-fryer {revnumber} not released, yet ;-)
************************************************************************
Example link: link:CHANGELOG.html[CHANGELOG] blah blah
Some actual info, do-not-miss etc comes here.

'Lopucha Pucnaak'
************************************************************************

Introduction
------------
{description}

The elevation is in the following goals:

- Multilingual generation (no limits on choice of target code language)
- Support for incremental parsing
- Support for grammar attribution & attributes evaluation
- Support for efficient source reading/processing (from files, sockets, ...)

CTX Fryer is free software.
The generator part is licensed under the terms of 'GNU General Public License
version 3' (GPLv3).
Parser run-time libraries, however, use the 'GNU Lesser General Public License
version 3' (LGPLv3) to enable legal linkage even by proprietary code.
The generator prototype and other parts written in Perl use the 'Perl Artistic
License' (as is custom practice).


Overview
--------
The project allows you to produce complete source analysis, including the following:

- Lexical segmentation (lexical elements being defined by regular expressions)
- Syntax analysis (the generator accepts LALR(1) grammars)
- Creation of parse tree
- Support for evaluation of arbitrary grammar attributes (i.e. the formal analysis)

Support for any target language is provided by the simple fact that the generator
doesn't produce the code directly.
Instead, the lexical and syntax analysers are described in XML and XSLT is then used
to generate the target source code, documentation etc.

Although the project is primarily aimed at creation of programming languages compilers
and interpreters, it may still be used to produce pure document/protocol parsers
(with no added weight).

Both the lexical and syntax analysers are produced as static tables operated by library
functions (which means that parsing context is defined by data, not flow).
It is therefore simple to support incremental parsing (parser state saving & recovery
on source stream availability).

Attribute grammars have direct support (generation of attribute evaluator hooks).
The evaluation may be directly used to perform formal analysis of source.
Just as well, it can be simply used for transformation of the parse tree to a DOM
(tree) instance.

Source handling support libraries are also part of the project.
The goal is to process the source with maximal efficiency (minimise reading roll-back,
no copying if possible).

=== (Programming) languages used
- Perl (generator prototype, scripting)
- XML (definition of the parser)
- XSL (transformation of the parser definition to target code, documentation generation etc)
- LaTeX (documentation target)
- C (primary target code)
- C++ (generator source)
- shell (scripting)
- possibly others (target code)

[[X7]]
=== References
- link:http://en.wikipedia.org/wiki/Regular_expression[Regular expression]
- link:http://en.wikipedia.org/wiki/LALR_parser[LALR parser]
- link:http://en.wikipedia.org/wiki/Attribute_grammar[Attribute grammar]

Sub-section ???
~~~~~~~~~~~~~~~
Blah blah blah
